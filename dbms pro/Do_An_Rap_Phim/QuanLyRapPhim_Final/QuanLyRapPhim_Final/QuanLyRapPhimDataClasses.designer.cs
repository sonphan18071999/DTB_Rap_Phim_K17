#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuanLyRapPhim_Final
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuanLyRapPhim")]
	public partial class QuanLyRapPhimDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChucVu(ChucVu instance);
    partial void UpdateChucVu(ChucVu instance);
    partial void DeleteChucVu(ChucVu instance);
    partial void InsertKhachHang(KhachHang instance);
    partial void UpdateKhachHang(KhachHang instance);
    partial void DeleteKhachHang(KhachHang instance);
    partial void InsertDatVe(DatVe instance);
    partial void UpdateDatVe(DatVe instance);
    partial void DeleteDatVe(DatVe instance);
    partial void InsertNhanVien(NhanVien instance);
    partial void UpdateNhanVien(NhanVien instance);
    partial void DeleteNhanVien(NhanVien instance);
    partial void InsertPhim(Phim instance);
    partial void UpdatePhim(Phim instance);
    partial void DeletePhim(Phim instance);
    partial void InsertRap(Rap instance);
    partial void UpdateRap(Rap instance);
    partial void DeleteRap(Rap instance);
    #endregion
		
		public QuanLyRapPhimDataClassesDataContext() : 
				base(global::QuanLyRapPhim_Final.Properties.Settings.Default.QuanLyRapPhimConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyRapPhimDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyRapPhimDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyRapPhimDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanLyRapPhimDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChucVu> ChucVus
		{
			get
			{
				return this.GetTable<ChucVu>();
			}
		}
		
		public System.Data.Linq.Table<KhachHang> KhachHangs
		{
			get
			{
				return this.GetTable<KhachHang>();
			}
		}
		
		public System.Data.Linq.Table<DatVe> DatVes
		{
			get
			{
				return this.GetTable<DatVe>();
			}
		}
		
		public System.Data.Linq.Table<NhanVien> NhanViens
		{
			get
			{
				return this.GetTable<NhanVien>();
			}
		}
		
		public System.Data.Linq.Table<Phim> Phims
		{
			get
			{
				return this.GetTable<Phim>();
			}
		}
		
		public System.Data.Linq.Table<Rap> Raps
		{
			get
			{
				return this.GetTable<Rap>();
			}
		}
		
		public System.Data.Linq.Table<SuatChieuPhim> SuatChieuPhims
		{
			get
			{
				return this.GetTable<SuatChieuPhim>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChucVu")]
	public partial class ChucVu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaCV;
		
		private string _ChucVu1;
		
		private int _Luong;
		
		private EntitySet<NhanVien> _NhanViens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaCVChanging(string value);
    partial void OnMaCVChanged();
    partial void OnChucVu1Changing(string value);
    partial void OnChucVu1Changed();
    partial void OnLuongChanging(int value);
    partial void OnLuongChanged();
    #endregion
		
		public ChucVu()
		{
			this._NhanViens = new EntitySet<NhanVien>(new Action<NhanVien>(this.attach_NhanViens), new Action<NhanVien>(this.detach_NhanViens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCV", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaCV
		{
			get
			{
				return this._MaCV;
			}
			set
			{
				if ((this._MaCV != value))
				{
					this.OnMaCVChanging(value);
					this.SendPropertyChanging();
					this._MaCV = value;
					this.SendPropertyChanged("MaCV");
					this.OnMaCVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ChucVu", Storage="_ChucVu1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChucVu1
		{
			get
			{
				return this._ChucVu1;
			}
			set
			{
				if ((this._ChucVu1 != value))
				{
					this.OnChucVu1Changing(value);
					this.SendPropertyChanging();
					this._ChucVu1 = value;
					this.SendPropertyChanged("ChucVu1");
					this.OnChucVu1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Luong", DbType="Int NOT NULL")]
		public int Luong
		{
			get
			{
				return this._Luong;
			}
			set
			{
				if ((this._Luong != value))
				{
					this.OnLuongChanging(value);
					this.SendPropertyChanging();
					this._Luong = value;
					this.SendPropertyChanged("Luong");
					this.OnLuongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChucVu_NhanVien", Storage="_NhanViens", ThisKey="MaCV", OtherKey="MaCV")]
		public EntitySet<NhanVien> NhanViens
		{
			get
			{
				return this._NhanViens;
			}
			set
			{
				this._NhanViens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NhanViens(NhanVien entity)
		{
			this.SendPropertyChanging();
			entity.ChucVu = this;
		}
		
		private void detach_NhanViens(NhanVien entity)
		{
			this.SendPropertyChanging();
			entity.ChucVu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KhachHang")]
	public partial class KhachHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaKH;
		
		private string _HovaLotKH;
		
		private string _TenKH;
		
		private EntitySet<DatVe> _DatVes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaKHChanging(string value);
    partial void OnMaKHChanged();
    partial void OnHovaLotKHChanging(string value);
    partial void OnHovaLotKHChanged();
    partial void OnTenKHChanging(string value);
    partial void OnTenKHChanged();
    #endregion
		
		public KhachHang()
		{
			this._DatVes = new EntitySet<DatVe>(new Action<DatVe>(this.attach_DatVes), new Action<DatVe>(this.detach_DatVes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKH", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaKH
		{
			get
			{
				return this._MaKH;
			}
			set
			{
				if ((this._MaKH != value))
				{
					this.OnMaKHChanging(value);
					this.SendPropertyChanging();
					this._MaKH = value;
					this.SendPropertyChanged("MaKH");
					this.OnMaKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HovaLotKH", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string HovaLotKH
		{
			get
			{
				return this._HovaLotKH;
			}
			set
			{
				if ((this._HovaLotKH != value))
				{
					this.OnHovaLotKHChanging(value);
					this.SendPropertyChanging();
					this._HovaLotKH = value;
					this.SendPropertyChanged("HovaLotKH");
					this.OnHovaLotKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenKH", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string TenKH
		{
			get
			{
				return this._TenKH;
			}
			set
			{
				if ((this._TenKH != value))
				{
					this.OnTenKHChanging(value);
					this.SendPropertyChanging();
					this._TenKH = value;
					this.SendPropertyChanged("TenKH");
					this.OnTenKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DatVe", Storage="_DatVes", ThisKey="MaKH", OtherKey="MaKH")]
		public EntitySet<DatVe> DatVes
		{
			get
			{
				return this._DatVes;
			}
			set
			{
				this._DatVes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = this;
		}
		
		private void detach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DatVe")]
	public partial class DatVe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaPhim;
		
		private string _SuatChieu;
		
		private string _MaNV;
		
		private string _MaKH;
		
		private string _MaRap;
		
		private string _Day;
		
		private int _So;
		
		private EntityRef<KhachHang> _KhachHang;
		
		private EntityRef<NhanVien> _NhanVien;
		
		private EntityRef<Phim> _Phim;
		
		private EntityRef<Rap> _Rap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaPhimChanging(string value);
    partial void OnMaPhimChanged();
    partial void OnSuatChieuChanging(string value);
    partial void OnSuatChieuChanged();
    partial void OnMaNVChanging(string value);
    partial void OnMaNVChanged();
    partial void OnMaKHChanging(string value);
    partial void OnMaKHChanged();
    partial void OnMaRapChanging(string value);
    partial void OnMaRapChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnSoChanging(int value);
    partial void OnSoChanged();
    #endregion
		
		public DatVe()
		{
			this._KhachHang = default(EntityRef<KhachHang>);
			this._NhanVien = default(EntityRef<NhanVien>);
			this._Phim = default(EntityRef<Phim>);
			this._Rap = default(EntityRef<Rap>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaPhim", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaPhim
		{
			get
			{
				return this._MaPhim;
			}
			set
			{
				if ((this._MaPhim != value))
				{
					if (this._Phim.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaPhimChanging(value);
					this.SendPropertyChanging();
					this._MaPhim = value;
					this.SendPropertyChanged("MaPhim");
					this.OnMaPhimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuatChieu", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SuatChieu
		{
			get
			{
				return this._SuatChieu;
			}
			set
			{
				if ((this._SuatChieu != value))
				{
					this.OnSuatChieuChanging(value);
					this.SendPropertyChanging();
					this._SuatChieu = value;
					this.SendPropertyChanged("SuatChieu");
					this.OnSuatChieuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNV", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaNV
		{
			get
			{
				return this._MaNV;
			}
			set
			{
				if ((this._MaNV != value))
				{
					if (this._NhanVien.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaNVChanging(value);
					this.SendPropertyChanging();
					this._MaNV = value;
					this.SendPropertyChanged("MaNV");
					this.OnMaNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaKH", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaKH
		{
			get
			{
				return this._MaKH;
			}
			set
			{
				if ((this._MaKH != value))
				{
					if (this._KhachHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaKHChanging(value);
					this.SendPropertyChanging();
					this._MaKH = value;
					this.SendPropertyChanged("MaKH");
					this.OnMaKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaRap", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaRap
		{
			get
			{
				return this._MaRap;
			}
			set
			{
				if ((this._MaRap != value))
				{
					if (this._Rap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaRapChanging(value);
					this.SendPropertyChanging();
					this._MaRap = value;
					this.SendPropertyChanged("MaRap");
					this.OnMaRapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_So", DbType="Int NOT NULL")]
		public int So
		{
			get
			{
				return this._So;
			}
			set
			{
				if ((this._So != value))
				{
					this.OnSoChanging(value);
					this.SendPropertyChanging();
					this._So = value;
					this.SendPropertyChanged("So");
					this.OnSoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DatVe", Storage="_KhachHang", ThisKey="MaKH", OtherKey="MaKH", IsForeignKey=true)]
		public KhachHang KhachHang
		{
			get
			{
				return this._KhachHang.Entity;
			}
			set
			{
				KhachHang previousValue = this._KhachHang.Entity;
				if (((previousValue != value) 
							|| (this._KhachHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhachHang.Entity = null;
						previousValue.DatVes.Remove(this);
					}
					this._KhachHang.Entity = value;
					if ((value != null))
					{
						value.DatVes.Add(this);
						this._MaKH = value.MaKH;
					}
					else
					{
						this._MaKH = default(string);
					}
					this.SendPropertyChanged("KhachHang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_DatVe", Storage="_NhanVien", ThisKey="MaNV", OtherKey="MaNV", IsForeignKey=true)]
		public NhanVien NhanVien
		{
			get
			{
				return this._NhanVien.Entity;
			}
			set
			{
				NhanVien previousValue = this._NhanVien.Entity;
				if (((previousValue != value) 
							|| (this._NhanVien.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NhanVien.Entity = null;
						previousValue.DatVes.Remove(this);
					}
					this._NhanVien.Entity = value;
					if ((value != null))
					{
						value.DatVes.Add(this);
						this._MaNV = value.MaNV;
					}
					else
					{
						this._MaNV = default(string);
					}
					this.SendPropertyChanged("NhanVien");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phim_DatVe", Storage="_Phim", ThisKey="MaPhim", OtherKey="MaPhim", IsForeignKey=true)]
		public Phim Phim
		{
			get
			{
				return this._Phim.Entity;
			}
			set
			{
				Phim previousValue = this._Phim.Entity;
				if (((previousValue != value) 
							|| (this._Phim.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phim.Entity = null;
						previousValue.DatVes.Remove(this);
					}
					this._Phim.Entity = value;
					if ((value != null))
					{
						value.DatVes.Add(this);
						this._MaPhim = value.MaPhim;
					}
					else
					{
						this._MaPhim = default(string);
					}
					this.SendPropertyChanged("Phim");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rap_DatVe", Storage="_Rap", ThisKey="MaRap", OtherKey="MaRap", IsForeignKey=true)]
		public Rap Rap
		{
			get
			{
				return this._Rap.Entity;
			}
			set
			{
				Rap previousValue = this._Rap.Entity;
				if (((previousValue != value) 
							|| (this._Rap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rap.Entity = null;
						previousValue.DatVes.Remove(this);
					}
					this._Rap.Entity = value;
					if ((value != null))
					{
						value.DatVes.Add(this);
						this._MaRap = value.MaRap;
					}
					else
					{
						this._MaRap = default(string);
					}
					this.SendPropertyChanged("Rap");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NhanVien")]
	public partial class NhanVien : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HovaLotNV;
		
		private string _TenNV;
		
		private string _MaNV;
		
		private string _MaCV;
		
		private EntitySet<DatVe> _DatVes;
		
		private EntityRef<ChucVu> _ChucVu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHovaLotNVChanging(string value);
    partial void OnHovaLotNVChanged();
    partial void OnTenNVChanging(string value);
    partial void OnTenNVChanged();
    partial void OnMaNVChanging(string value);
    partial void OnMaNVChanged();
    partial void OnMaCVChanging(string value);
    partial void OnMaCVChanged();
    #endregion
		
		public NhanVien()
		{
			this._DatVes = new EntitySet<DatVe>(new Action<DatVe>(this.attach_DatVes), new Action<DatVe>(this.detach_DatVes));
			this._ChucVu = default(EntityRef<ChucVu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HovaLotNV", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string HovaLotNV
		{
			get
			{
				return this._HovaLotNV;
			}
			set
			{
				if ((this._HovaLotNV != value))
				{
					this.OnHovaLotNVChanging(value);
					this.SendPropertyChanging();
					this._HovaLotNV = value;
					this.SendPropertyChanged("HovaLotNV");
					this.OnHovaLotNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenNV", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string TenNV
		{
			get
			{
				return this._TenNV;
			}
			set
			{
				if ((this._TenNV != value))
				{
					this.OnTenNVChanging(value);
					this.SendPropertyChanging();
					this._TenNV = value;
					this.SendPropertyChanged("TenNV");
					this.OnTenNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNV", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaNV
		{
			get
			{
				return this._MaNV;
			}
			set
			{
				if ((this._MaNV != value))
				{
					this.OnMaNVChanging(value);
					this.SendPropertyChanging();
					this._MaNV = value;
					this.SendPropertyChanged("MaNV");
					this.OnMaNVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCV", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaCV
		{
			get
			{
				return this._MaCV;
			}
			set
			{
				if ((this._MaCV != value))
				{
					if (this._ChucVu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaCVChanging(value);
					this.SendPropertyChanging();
					this._MaCV = value;
					this.SendPropertyChanged("MaCV");
					this.OnMaCVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NhanVien_DatVe", Storage="_DatVes", ThisKey="MaNV", OtherKey="MaNV")]
		public EntitySet<DatVe> DatVes
		{
			get
			{
				return this._DatVes;
			}
			set
			{
				this._DatVes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChucVu_NhanVien", Storage="_ChucVu", ThisKey="MaCV", OtherKey="MaCV", IsForeignKey=true)]
		public ChucVu ChucVu
		{
			get
			{
				return this._ChucVu.Entity;
			}
			set
			{
				ChucVu previousValue = this._ChucVu.Entity;
				if (((previousValue != value) 
							|| (this._ChucVu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChucVu.Entity = null;
						previousValue.NhanViens.Remove(this);
					}
					this._ChucVu.Entity = value;
					if ((value != null))
					{
						value.NhanViens.Add(this);
						this._MaCV = value.MaCV;
					}
					else
					{
						this._MaCV = default(string);
					}
					this.SendPropertyChanged("ChucVu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = this;
		}
		
		private void detach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.NhanVien = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phim")]
	public partial class Phim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TenPhim;
		
		private string _MaPhim;
		
		private int _GiaVe;
		
		private System.Data.Linq.Binary _Poster;
		
		private EntitySet<DatVe> _DatVes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenPhimChanging(string value);
    partial void OnTenPhimChanged();
    partial void OnMaPhimChanging(string value);
    partial void OnMaPhimChanged();
    partial void OnGiaVeChanging(int value);
    partial void OnGiaVeChanged();
    partial void OnPosterChanging(System.Data.Linq.Binary value);
    partial void OnPosterChanged();
    #endregion
		
		public Phim()
		{
			this._DatVes = new EntitySet<DatVe>(new Action<DatVe>(this.attach_DatVes), new Action<DatVe>(this.detach_DatVes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenPhim", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TenPhim
		{
			get
			{
				return this._TenPhim;
			}
			set
			{
				if ((this._TenPhim != value))
				{
					this.OnTenPhimChanging(value);
					this.SendPropertyChanging();
					this._TenPhim = value;
					this.SendPropertyChanged("TenPhim");
					this.OnTenPhimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaPhim", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaPhim
		{
			get
			{
				return this._MaPhim;
			}
			set
			{
				if ((this._MaPhim != value))
				{
					this.OnMaPhimChanging(value);
					this.SendPropertyChanging();
					this._MaPhim = value;
					this.SendPropertyChanged("MaPhim");
					this.OnMaPhimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiaVe", DbType="Int NOT NULL")]
		public int GiaVe
		{
			get
			{
				return this._GiaVe;
			}
			set
			{
				if ((this._GiaVe != value))
				{
					this.OnGiaVeChanging(value);
					this.SendPropertyChanging();
					this._GiaVe = value;
					this.SendPropertyChanged("GiaVe");
					this.OnGiaVeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Poster", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Poster
		{
			get
			{
				return this._Poster;
			}
			set
			{
				if ((this._Poster != value))
				{
					this.OnPosterChanging(value);
					this.SendPropertyChanging();
					this._Poster = value;
					this.SendPropertyChanged("Poster");
					this.OnPosterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phim_DatVe", Storage="_DatVes", ThisKey="MaPhim", OtherKey="MaPhim")]
		public EntitySet<DatVe> DatVes
		{
			get
			{
				return this._DatVes;
			}
			set
			{
				this._DatVes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.Phim = this;
		}
		
		private void detach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.Phim = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rap")]
	public partial class Rap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaRap;
		
		private string _SoDayGhe;
		
		private string _SoLuongGhe;
		
		private string _LoaiPhim;
		
		private EntitySet<DatVe> _DatVes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaRapChanging(string value);
    partial void OnMaRapChanged();
    partial void OnSoDayGheChanging(string value);
    partial void OnSoDayGheChanged();
    partial void OnSoLuongGheChanging(string value);
    partial void OnSoLuongGheChanged();
    partial void OnLoaiPhimChanging(string value);
    partial void OnLoaiPhimChanged();
    #endregion
		
		public Rap()
		{
			this._DatVes = new EntitySet<DatVe>(new Action<DatVe>(this.attach_DatVes), new Action<DatVe>(this.detach_DatVes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaRap", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaRap
		{
			get
			{
				return this._MaRap;
			}
			set
			{
				if ((this._MaRap != value))
				{
					this.OnMaRapChanging(value);
					this.SendPropertyChanging();
					this._MaRap = value;
					this.SendPropertyChanged("MaRap");
					this.OnMaRapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoDayGhe", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SoDayGhe
		{
			get
			{
				return this._SoDayGhe;
			}
			set
			{
				if ((this._SoDayGhe != value))
				{
					this.OnSoDayGheChanging(value);
					this.SendPropertyChanging();
					this._SoDayGhe = value;
					this.SendPropertyChanged("SoDayGhe");
					this.OnSoDayGheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLuongGhe", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SoLuongGhe
		{
			get
			{
				return this._SoLuongGhe;
			}
			set
			{
				if ((this._SoLuongGhe != value))
				{
					this.OnSoLuongGheChanging(value);
					this.SendPropertyChanging();
					this._SoLuongGhe = value;
					this.SendPropertyChanged("SoLuongGhe");
					this.OnSoLuongGheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoaiPhim", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LoaiPhim
		{
			get
			{
				return this._LoaiPhim;
			}
			set
			{
				if ((this._LoaiPhim != value))
				{
					this.OnLoaiPhimChanging(value);
					this.SendPropertyChanging();
					this._LoaiPhim = value;
					this.SendPropertyChanged("LoaiPhim");
					this.OnLoaiPhimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rap_DatVe", Storage="_DatVes", ThisKey="MaRap", OtherKey="MaRap")]
		public EntitySet<DatVe> DatVes
		{
			get
			{
				return this._DatVes;
			}
			set
			{
				this._DatVes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.Rap = this;
		}
		
		private void detach_DatVes(DatVe entity)
		{
			this.SendPropertyChanging();
			entity.Rap = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuatChieuPhim")]
	public partial class SuatChieuPhim
	{
		
		private string _MaPhim;
		
		private string _SuatChieu;
		
		private string _MaRap;
		
		public SuatChieuPhim()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaPhim", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MaPhim
		{
			get
			{
				return this._MaPhim;
			}
			set
			{
				if ((this._MaPhim != value))
				{
					this._MaPhim = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuatChieu", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SuatChieu
		{
			get
			{
				return this._SuatChieu;
			}
			set
			{
				if ((this._SuatChieu != value))
				{
					this._SuatChieu = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaRap", DbType="NVarChar(50)")]
		public string MaRap
		{
			get
			{
				return this._MaRap;
			}
			set
			{
				if ((this._MaRap != value))
				{
					this._MaRap = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
